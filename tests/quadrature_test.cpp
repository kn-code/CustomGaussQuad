//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//

#include <boost/ut.hpp>

#include <custom_gauss_quad.h>
#include <unsupported/Eigen/MPRealSupport>

using namespace boost::ut;
using namespace boost::ut::literals;

suite quadratureTest = []
{
    using std::abs;
    using std::log;
    using std::pow;

    using VectorLD = Eigen::Vector<long double, Eigen::Dynamic>;

    "Gauss Legendre degree 100"_test = []
    {
        // Computed with Mathematica
        VectorLD weights{
            {0.00073463449050567173041L, 0.00170939265351810523953L, 0.00268392537155348241944L,
             0.00365596120132637518234L, 0.00462445006342211935110L, 0.00558842800386551515721L,
             0.0065469484508453227642L, 0.0074990732554647115788L, 0.0084438714696689714026L,
             0.0093804196536944579514L, 0.0103078025748689695858L, 0.0112251140231859771172L,
             0.0121314576629794974077L, 0.0130259478929715422856L, 0.0139077107037187726880L,
             0.0147758845274413017689L, 0.0156296210775460027239L, 0.0164680861761452126431L,
             0.0172904605683235824393L, 0.0180959407221281166644L, 0.0188837396133749045529L,
             0.0196530874944353058654L, 0.0204032326462094327668L, 0.0211334421125276415427L,
             0.0218430024162473863140L, 0.0225312202563362727018L, 0.0231974231852541216225L,
             0.0238409602659682059626L, 0.0244612027079570527200L, 0.0250575444815795897038L,
             0.0256294029102081160756L, 0.0261762192395456763423L, 0.0266974591835709626604L,
             0.0271926134465768801365L, 0.0276611982207923882942L, 0.0281027556591011733176L,
             0.0285168543223950979909L, 0.0289030896011252031349L, 0.0292610841106382766201L,
             0.0295904880599126425118L, 0.0298909795933328309168L, 0.0301622651051691449191L,
             0.0304040795264548200165L, 0.0306161865839804484965L, 0.0307983790311525904277L,
             0.0309504788504909882341L, 0.0310723374275665165878L, 0.0311638356962099067838L,
             0.031224884254849357732L, 0.031255423453863356948L, 0.031255423453863356948L,
             0.031224884254849357732L, 0.0311638356962099067838L, 0.0310723374275665165878L,
             0.0309504788504909882341L, 0.0307983790311525904277L, 0.0306161865839804484965L,
             0.0304040795264548200165L, 0.0301622651051691449191L, 0.0298909795933328309168L,
             0.0295904880599126425118L, 0.0292610841106382766201L, 0.0289030896011252031349L,
             0.0285168543223950979909L, 0.0281027556591011733176L, 0.0276611982207923882942L,
             0.0271926134465768801365L, 0.0266974591835709626604L, 0.0261762192395456763423L,
             0.0256294029102081160756L, 0.0250575444815795897038L, 0.0244612027079570527200L,
             0.0238409602659682059626L, 0.0231974231852541216225L, 0.0225312202563362727018L,
             0.0218430024162473863140L, 0.0211334421125276415427L, 0.0204032326462094327668L,
             0.0196530874944353058654L, 0.0188837396133749045529L, 0.0180959407221281166644L,
             0.0172904605683235824393L, 0.0164680861761452126431L, 0.0156296210775460027239L,
             0.0147758845274413017689L, 0.0139077107037187726880L, 0.0130259478929715422856L,
             0.0121314576629794974077L, 0.0112251140231859771172L, 0.0103078025748689695858L,
             0.0093804196536944579514L, 0.0084438714696689714026L, 0.0074990732554647115788L,
             0.0065469484508453227642L, 0.00558842800386551515721L, 0.00462445006342211935110L,
             0.00365596120132637518234L, 0.00268392537155348241944L, 0.00170939265351810523953L,
             0.00073463449050567173041L}
        };
        VectorLD abscissae{
            {-0.99971372677344123L, -0.99849195063959582L, -0.99629513473312515L, -0.99312493703744346L,
             -0.98898439524299175L, -0.98387754070605702L, -0.97780935848691829L, -0.97078577576370633L,
             -0.96281365425581553L, -0.95390078292549174L, -0.94405587013625598L, -0.93328853504307955L,
             -0.92160929814533395L, -0.90902957098252969L, -0.89556164497072699L, -0.88121867938501842L,
             -0.86601468849716462L, -0.84996452787959128L, -0.83308387988840082L, -0.81538923833917625L,
             -0.79689789239031448L, -0.77762790964949548L, -0.75759811851970718L, -0.73682808980202071L,
             -0.71533811757305645L, -0.69314919935580197L, -0.67028301560314102L, -0.64676190851412928L,
             -0.62260886020370777L, -0.59784747024717872L, -0.57250193262138119L, -0.54659701206509417L,
             -0.52015801988176306L, -0.49321078920819093L, -0.46578164977335804L, -0.43789740217203151L,
             -0.40958529167830154L, -0.38087298162462996L, -0.35178852637242172L, -0.32236034390052915L,
             -0.29261718803847196L, -0.26258812037150348L, -0.23230248184497397L, -0.20178986409573600L,
             -0.17108008053860327L, -0.14020313723611397L, -0.10918920358006112L, -0.07806858281343664L,
             -0.04687168242159163L, -0.01562898442154308L, 0.01562898442154308L, 0.04687168242159163L,
             0.07806858281343664L, 0.10918920358006112L, 0.14020313723611397L, 0.17108008053860327L,
             0.20178986409573600L, 0.23230248184497397L, 0.26258812037150348L, 0.29261718803847196L,
             0.32236034390052915L, 0.35178852637242172L, 0.38087298162462996L, 0.40958529167830154L,
             0.43789740217203151L, 0.46578164977335804L, 0.49321078920819093L, 0.52015801988176306L,
             0.54659701206509417L, 0.57250193262138119L, 0.59784747024717872L, 0.62260886020370777L,
             0.64676190851412928L, 0.67028301560314102L, 0.69314919935580197L, 0.71533811757305645L,
             0.73682808980202071L, 0.75759811851970718L, 0.77762790964949548L, 0.79689789239031448L,
             0.81538923833917625L, 0.83308387988840082L, 0.84996452787959128L, 0.86601468849716462L,
             0.88121867938501842L, 0.89556164497072699L, 0.90902957098252969L, 0.92160929814533395L,
             0.93328853504307955L, 0.94405587013625598L, 0.95390078292549174L, 0.96281365425581553L,
             0.97078577576370633L, 0.97780935848691829L, 0.98387754070605702L, 0.98898439524299175L,
             0.99312493703744346L, 0.99629513473312515L, 0.99849195063959582L, 0.99971372677344123L}
        };

        {
            auto weightFunc = [](double)
            {
                return 1.0;
            };
            auto gauss = CustomGaussQuad::computeGaussRule(weightFunc, 100, -1.0, 1.0, 200);

            expect(gauss.weights.size() == weights.size());
            expect(gauss.abscissae.size() == abscissae.size());
            expect(lt((weights.cast<double>() - gauss.weights).cwiseAbs().maxCoeff(), 5e-15));
            expect(lt((abscissae.cast<double>() - gauss.abscissae).cwiseAbs().maxCoeff(), 5e-15));
        }

        {
            auto weightFunc = [](long double)
            {
                return 1.0;
            };
            long double a    = -1;
            long double b    = 1;
            auto gauss       = CustomGaussQuad::computeGaussRule(weightFunc, 100, a, b, 200);

            expect(gauss.weights.size() == weights.size());
            expect(gauss.abscissae.size() == abscissae.size());
            expect(lt((weights - gauss.weights).cwiseAbs().maxCoeff(), 7e-18));
            expect(lt((abscissae - gauss.abscissae).cwiseAbs().maxCoeff(), 7e-18));
        }
    };

    "Integrate moments of w(x)=log(x)^2"_test = []
    {
        auto weightFunc = [](double x)
        {
            return pow(log(x), 2);
        };
        int n      = 50;
        auto gauss = CustomGaussQuad::computeGaussRule(weightFunc, n, 0.0, 1.0, 100);

        // \int_0^1 log(x)^2 * x^k dx
        auto moments = [](int k) -> double
        {
            return 2.0 / pow(k + 1, 3);
        };

        for (int k = 0; k <= 2 * n - 1; ++k)
        {
            auto f = [k](double x)
            {
                return pow(x, k);
            };
            double result = gauss.integrate(f);
            double exact  = moments(k);

            expect(lt(abs(result - exact), 5e-16)) << "k =" << k;
        }
    };

    "Integrate moments of w(x)=log(x)^2 with normalized weights"_test = []
    {
        auto weightFunc = [](double x)
        {
            return pow(log(x), 2);
        };
        int n      = 50;
        auto gauss = CustomGaussQuad::computeGaussRule(weightFunc, n, 0.0, 1.0, 100, 4.0, true);

        // \int_0^1 log(x)^2 * x^k dx
        auto moments = [](int k) -> double
        {
            return 2.0 / pow(k + 1, 3);
        };

        for (int k = 0; k <= 2 * n - 1; ++k)
        {
            auto f = [k](double x)
            {
                return pow(log(x), 2) * pow(x, k);
            };
            double result = gauss.integrate(f);
            double exact  = moments(k);

            expect(lt(abs(result - exact), 5e-16)) << "k =" << k;
        }
    };
};

int main()
{
    return 0;
}